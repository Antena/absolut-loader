0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.14.9
3 info using node@v0.12.9
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec { raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/lostie/wc/absolut-loader',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/lostie/.npm/absolut-loader/0.0.1/package.tgz not in flight; packing
9 verbose tar pack [ '/Users/lostie/.npm/absolut-loader/0.0.1/package.tgz',
9 verbose tar pack   '/Users/lostie/wc/absolut-loader' ]
10 verbose tarball /Users/lostie/.npm/absolut-loader/0.0.1/package.tgz
11 verbose folder /Users/lostie/wc/absolut-loader
12 info prepublish absolut-loader@0.0.1
13 verbose addLocalTarball adding from inside cache /Users/lostie/.npm/absolut-loader/0.0.1/package.tgz
14 silly cache afterAdd absolut-loader@0.0.1
15 verbose afterAdd /Users/lostie/.npm/absolut-loader/0.0.1/package/package.json not in flight; writing
16 verbose afterAdd /Users/lostie/.npm/absolut-loader/0.0.1/package/package.json written
17 silly publish { name: 'absolut-loader',
17 silly publish   version: '0.0.1',
17 silly publish   description: 'Webpack loader to automatically require any resources before angular code definition',
17 silly publish   private: true,
17 silly publish   keywords: [ 'webpack', 'loader', 'preloader', 'templateCache', 'require' ],
17 silly publish   homepage: 'https://github.com/deepsweet/baggage-loader',
17 silly publish   repository:
17 silly publish    { type: 'git',
17 silly publish      url: 'git://github.com/deepsweet/baggage-loader.git' },
17 silly publish   author:
17 silly publish    { name: 'Denise Fernandez',
17 silly publish      email: 'denise@antena.co',
17 silly publish      url: 'https://github.com/Antena' },
17 silly publish   main: 'index.js',
17 silly publish   peerDependencies: { webpack: '1.x.x' },
17 silly publish   devDependencies: { eslint: '^0.8.2', jscs: '^1.6.2' },
17 silly publish   scripts: { lint: 'eslint index.js && jscs index.js' },
17 silly publish   engines: { node: '>=0.10.0' },
17 silly publish   license: 'UNLICENSED',
17 silly publish   readme: '# absolut-loader\n\nWebpack loader (inpired by [baggage-loader](https://github.com/deepsweet/baggage-loader)), to be used as a pre-loader in conjunction with [ngtemplate-loader](https://github.com/WearyMonkey/ngtemplate-loader).\n\n[ngtemplate-loader](https://github.com/WearyMonkey/ngtemplate-loader) pre-loads the AngularJS template cache with required template files. This loader forces you to add those requires outside angular code definition, because that would operate only after angular bootstraps.\n\nSee [Beware of requiring from the directive definition](https://github.com/WearyMonkey/ngtemplate-loader#beware-of-requiring-from-the-directive-definition).\n\nThat is where baggage-loader comes in: it runs as a pre-loader, and runs a first pass on your angular code.\nThe objective is to allow you to put your requires inside your angular code, by preprending your source code with the same require.\n\nThe problem with `baggage-loader`, is that it takes the file path as a configuration for injecting.\n\nFor example:\n\n```javascript\npreLoaders: [ {\n    test: /\\/components\\/.+script\\.js$/,\n    // baggage?file=var&file-without-var&…\n    loader: \'baggage?template.html\'\n} ]\n```\nThis would run on script.js files, and inject a require for template.html on top of that file.\nIt also allows you to define that file name based on the test file dir or file name (using `[dir]`, `[Dir]`, `[file]` and `[File]`).\n\nThe problem with this approach is that it forces you to name your html files in a certain way, either with a fixed name, based on dir or js file, or a combination of both.\n\nThis means it becomes unusable in some scenarios, and also, if you were to rename your template files, changing the require() inside your angular code wouldn\'t be enough.\nMoreover, you would be injecting requires for files that you are not actually requiring from within your js file.\n\nFor example, given the following file structure:\n\n```\ncomponents/\n├── component-1/\n│   ├── component-1-directive.js\n│   └── component-1.html\n├── component-2/\n│   ├── component-2-directive.js\n│   ├── component-2-controller.js\n│   └── component-2.html\n└── component-3/\n    ├── component-3-controller.js\n    ├── component-3-utils.js    \n    ├── component-3-variation1-directive.js\n    ├── component-3-variation1.html\n    ├── component-3-variation2-directive.js\n    └── component-3-variation2.html\n```\n\nWhere component #3 has two flavours/variations which share a controller and some utility code, but have different directive definitions and different templates.\n\nAnd the following `webpack.config.js`\n\n```javascript\npreLoaders: [\n    {\n        test: /components\\/(.*)\\.js/,\n        loader: \'baggage?[dir].html\'\n    }\n],\n```\nYou would target most html files, except for this one, which would not be possible to target in a generic way: \n```\ncomponents/component-3/component-3-variation1.html\n```\n\nThis is where `absolut-loader` comes into play:\n\nThis pre-loader will look into the actual source of the specified js files, and look for the following pattern:\n\n```javascript\nrequire(\'./[something].html\')\n```\n\nand check if that file actually exists in that directory. If so, it continues to prepend the js source with require just as baggage-loader does.\n\n### Note\nThis loader does not currently support varible assignation or source maps, as `baggage-loader` does. \n\n### Full example\n\nGiven the same file structure as the example above, you add a pre-loader that targets all js files within components directory, but without passing any query params to `absolut`:\n\n```javascript\npreLoaders: [\n    {\n        test: /components\\/(.*)\\.js/,\n        loader: \'absolut\'\n    }\n],\n```\n\nLet\'s say the contents for `component-3-variation1-directive.js` are the following:\n\n```javascript\n\'use strict\';\n\n// @ngInject\nmodule.exports = function() {\n\treturn {\n\t\trestrict: \'EA\',\n\t\tscope: {\n\t\t\tconfig: \'=\'\n\t\t},\n\t\ttemplateUrl: require(\'./component-3-variation1.html\'),\n\t\tcontroller: \'Component3Controller\'\n\t};\n};\n\n```\nThe pre-loader will check that a file `component-3-variation1.html` exists in that same directory, and if so, the following will be injected at the very beginning of the file:\n\n```javascript\n/* Injected by absolut-loader */\nrequire(\'./component-3-variation1.html\');\n```\n\nThis will be then picked by `ngannotate-loader` in the next phase, which registers its contents in angular\'s templateCache, using the file\'s full path as a key, so to avoid possible collisions within a function, and replaces the original require by this function.\n\n```javascript\n/* Injected by absolut-loader */\n\t__webpack_require__(113);\n```\n\n```javascript\n/* 113 */\n/***/ function(module, exports) {\n\n\tvar path = \'components/component-3/component-3-variation1.html\';\n\tvar html = "<div>\\n    Hello World\\n</div>";\n\twindow.angular.module(\'ng\').run([\'$templateCache\', function(c) { c.put(path, html) }]);\n\tmodule.exports = path;\n\n/***/ },\n```javascript\n',
17 silly publish   readmeFilename: 'README.md',
17 silly publish   gitHead: '21bba8bf14f8b026c9da3fd59d3abd125a5252b6',
17 silly publish   bugs: { url: 'https://github.com/deepsweet/baggage-loader/issues' },
17 silly publish   _id: 'absolut-loader@0.0.1',
17 silly publish   _shasum: 'ce7de0c90fe2ecd7947eb2038e6a2092cbb7108e',
17 silly publish   _from: '.' }
18 verbose getPublishConfig undefined
19 verbose stack Error: This package has been marked as private
19 verbose stack Remove the 'private' field from the package.json to publish it.
19 verbose stack     at publish_ (/usr/local/lib/node_modules/npm/lib/publish.js:98:5)
19 verbose stack     at Array.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/slide/lib/bind-actor.js:15:8)
19 verbose stack     at LOOP (/usr/local/lib/node_modules/npm/node_modules/slide/lib/chain.js:15:14)
19 verbose stack     at LOOP (/usr/local/lib/node_modules/npm/node_modules/slide/lib/chain.js:14:28)
19 verbose stack     at chain (/usr/local/lib/node_modules/npm/node_modules/slide/lib/chain.js:20:5)
19 verbose stack     at /usr/local/lib/node_modules/npm/lib/publish.js:73:5
19 verbose stack     at RES (/usr/local/lib/node_modules/npm/node_modules/inflight/inflight.js:23:14)
19 verbose stack     at f (/usr/local/lib/node_modules/npm/node_modules/once/once.js:17:25)
19 verbose stack     at /usr/local/lib/node_modules/npm/lib/cache.js:350:14
19 verbose stack     at /usr/local/lib/node_modules/npm/node_modules/write-file-atomic/index.js:29:15
20 verbose cwd /Users/lostie/wc/absolut-loader
21 error Darwin 14.5.0
22 error argv "node" "/usr/local/bin/npm" "publish"
23 error node v0.12.9
24 error npm  v2.14.9
25 error This package has been marked as private
25 error Remove the 'private' field from the package.json to publish it.
26 error If you need help, you may report this error at:
26 error     <https://github.com/npm/npm/issues>
27 verbose exit [ 1, true ]
